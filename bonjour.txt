IMPORT SYS, OS

IMPORT LEXER AS SSP

#C1="PS -AUX | SORT -K1N 2>> /DEV/NULL | TR 'A-Z' 'A-Z' | TEE TOTO.TXT | CAT > LOG.TXT "
#C1="PS -AUX | SORT -K1N | WC -L"
PRINT("******************* PROGRAMME MINI-SHELL *******************\N")
PRINT("\T")
#RESULT = SSP.GET_PARSER().PARSE(C1)


#DEF EXECPIPE(INP,OUTPUT,COMMAND):
DEF EXECUTERLESPIPES(RFD,WFD,COMMAND): # FONCTION PERMET D'EXECUTER UNE COMMANDE à EN LECTURE DS LE RFD ET ECRIRE VERS WFD
      PID = OS.FORK()
      IF PID == 0: # LE FILS S'OCCOPE DE L'EXECUTION DES COMMANDES
            COMMANDE=COMMAND._CMD.GETCOMMAND() # POUR RECUPERER LES COMMANDES à PARTIR DE L'OBJET PROCESS DU LEXER
            ARGCOMMANDE=COMMAND._CMD.GETARGS()
            ARGCOMMANDE = [COMMANDE]+ARGCOMMANDE # ON RAJOUTE LA COMMANDE EN PREMIER PUIS L'ARGUMENT : TOUTE LES FN EXEC LE 1ER ARG EST LA COMMANDE LUI MEME
            IF RFD != 0: # ON VERIFIE SI IL Y A LECTURE VENANT DE L'ENTRER STANDARD
                  OS.DUP2(RFD,0)# ON LU DEPUIS RFD AU LIEU DE L'ENTRER STANDARD
                  OS.CLOSE(RFD)# ON FERMER APRES
            ELSE:
                  REDIRENTREE = FILTRERREDIRECTIONSENTREE(COMMAND) # ON CHERCHE SI IL Y A UNE REDIRECTION DANS LA COMMANDE
                  IF REDIRENTREE:
                        RE = OS.OPEN(REDIRENTREE._FILESPEC, OS.O_RDONLY)
                        OS.DUP2(RE, 0)
                        OS.CLOSE(RE)

            IF WFD != 1: # SI ON A UNE SORTIE VERS LE TUBE
                  OS.DUP2(WFD,1) # AU LIEU DE LA SORTIE STANDARD AU ECRIT VERS WFD
                  OS.CLOSE(WFD) # ON FERME
            ELSE :
                  REDIRSORTIE = FILTRERREDIRECTIONSSORTIE(COMMAND) # ON CHERCHE SI ON A UNE REDIRECTION DE SORTIE DANS LA COMMANDE
                  IF REDIRSORTIE:
                        RE_WR_FD = NONE # ON INITIALISE
                        IF REDIRSORTIE.ISAPPEND(): # SI C'EST EN MODE APPEND ON OUVRE EN MODE APPEND
                              RE_WR_FD=OS.OPEN(REDIRSORTIE._FILESPEC, OS.O_WRONLY | OS.O_APPEND | OS.O_CREAT )
                        ELSE: # SINON ON FAIT UNE REDIRECTION NORMALE
                              RE_WR_FD=OS.OPEN(REDIRSORTIE._FILESPEC, OS.O_WRONLY| OS.O_CREAT | OS.O_TRUNC)
                        OS.DUP2(RE_WR_FD, 1)
                        OS.CLOSE(RE_WR_FD)

                  REDIRERREUR=FILTRERREDIRECTIONSERREUR(COMMAND)# REDIRECTION D'ERREUR GERER PAR LE FILS
                  IF REDIRERREUR:
                        RE_ER_FD = NONE
                        IF REDIRERREUR.ISAPPEND():
                              RE_ER_FD=OS.OPEN(REDIRERREUR._FILESPEC, OS.O_WRONLY | OS.O_APPEND | OS.O_CREAT)
                        ELSE:
                              RE_ER_FD=OS.OPEN(REDIRERREUR._FILESPEC, OS.O_WRONLY| OS.O_CREAT | OS.O_TRUNC)

                        OS.DUP2(RE_ER_FD,2)
                        OS.CLOSE(RE_ER_FD)


            TRY:
                OS.EXECVP(COMMANDE,ARGCOMMANDE)
            EXCEPT EXCEPTION AS E:
                OS.WRITE(2,BYTEARRAY("IL Y A UN PROBLEME AVEC L'EXECUTION DE " +COMMANDE +"\N","UTF-8"))
                SYS.EXIT(-1)

      ELSE: # LE PèRE  ATTEND LA MORT DU FILS

            OS.WAITPID(PID, 0)


DEF EXECUTER(P): # P C'EST L'OBJET PROCESS CETTE PERMET D'EXECUTER LA COMMANDE
      RFD = 0
      FOR I IN P:
            R,W = OS.PIPE()
            EXECUTERLESPIPES(RFD,W,I)
            OS.CLOSE(W)
            RFD = R # ENTRER DU TUBE COURANT  ET RFD ENTREE DU TUBE PRECEDENT
      PID = OS.FORK()
      IF PID == 0:
          IF RFD != 0:
            OS.DUP2(RFD,0)

            DERNIERCOMMANDE = P[-1]._CMD.GETCOMMAND() # ON PREND LA DERNIèRE COMMANDE LA CHAINE ET ON EXECUTE
            DERNIERARGS =  P[-1]._CMD.GETARGS() # ON PREND DERNIER ARGUMENT
            DERNIERARGS = [DERNIERCOMMANDE] + DERNIERARGS
            REDIRSORTIE = FILTRERREDIRECTIONSSORTIE(P[-1]) # ON REDIRIGE LA DERNIERE COMMANDE VERS LA SORTIE
            IF REDIRSORTIE:
                  RE_WR_FD = NONE
                  IF REDIRSORTIE.ISAPPEND():
                        RE_WR_FD=OS.OPEN(REDIRSORTIE._FILESPEC, OS.O_WRONLY | OS.O_APPEND | OS.O_CREAT )
                  ELSE:
                        RE_WR_FD=OS.OPEN(REDIRSORTIE._FILESPEC, OS.O_WRONLY| OS.O_CREAT | OS.O_TRUNC)
                  OS.DUP2(RE_WR_FD, 1)
                  OS.CLOSE(RE_WR_FD)

            """ PARTIE POUR FAIRE LA REDIRECTION D'ERREUR """

            REDIRERREUR=FILTRERREDIRECTIONSERREUR(P[-1])# REDIRECTION D'ERREUR GERER PAR LE FILS
            IF REDIRERREUR:
                  RE_ER_FD = NONE
                  IF REDIRERREUR.ISAPPEND():
                        RE_ER_FD=OS.OPEN(REDIRERREUR._FILESPEC, OS.O_WRONLY | OS.O_APPEND | OS.O_CREAT)
                  ELSE:
                        RE_ER_FD=OS.OPEN(REDIRERREUR._FILESPEC, OS.O_WRONLY| OS.O_CREAT | OS.O_TRUNC)

                  OS.DUP2(RE_ER_FD,2)
                  OS.CLOSE(RE_ER_FD)

            TRY:
                OS.EXECVP(DERNIERCOMMANDE, DERNIERARGS)
            EXCEPT EXCEPTION AS E:
                OS.WRITE(2,BYTEARRAY("IL Y A UN PROBLEME AVEC L'EXECUTION DE " + DERNIERCOMMANDE +"\N","UTF-8"))
                SYS.EXIT(-1)
      OS.WAIT()
      RETURN
"""********************** FIN REDIRECTION ERREUR ************************************** """

""" FILTRER LA REDIRECTION D'ENTREE à PARTIR D'UN PROCESSUS """
DEF FILTRERREDIRECTIONSENTREE(PROCESSUS): # PROCESUS C'EST UN OBET DE LA CLASS PROCESS(): DU LEXER.PY
      IF NOT PROCESSUS._REDIRS OR  NOT PROCESSUS._REDIRS._REDIRS : # SI IL N'Y PAS DE REDIRECTION RENVOI NONE
            RETURN NONE
      RETURN  NEXT((RE FOR RE IN PROCESSUS._REDIRS._REDIRS IF RE.__CLASS__.__NAME__ == "INREDIR"), NONE) # RETURN LA 1ERE VALEUR DANS UNE LISTE QUI VALIDE UNE CONDITION, SI AUCUN ELT NE VALID LA CONDITION LE 2 ARG EST RENVOYER

""" FILTRER LA REDIRECTION SORTIE à PARTIR D'UN PROCESSUS """
DEF FILTRERREDIRECTIONSSORTIE(PROCESSUS):
      IF NOT PROCESSUS._REDIRS OR NOT PROCESSUS._REDIRS._REDIRS:
            RETURN NONE
      RETURN  NEXT((RE FOR RE IN PROCESSUS._REDIRS._REDIRS IF RE.__CLASS__.__NAME__ == "OUTREDIR"), NONE)

""" FILTRER LA REDIRECTION ERREUR à PARTIR D'UN PROCESSUS """
DEF FILTRERREDIRECTIONSERREUR(PROCESSUS):
      RETURN  NEXT((RE FOR RE IN PROCESSUS._REDIRS._REDIRS IF RE.__CLASS__.__NAME__ == "ERRREDIR"), NONE)

# ******************************FIN *************************************

""" FONCTION PRINCIPALE """

#PRINT(COMMANDES)

WHILE(TRUE): # ON FAIT UNE BOUCLE INFINI POUR EXCUTER DES COMMANDE à PARTIR DU PROMPT
      C = INPUT("\NLINUX$")
      IF C.STRIP()=="": # SI IL N'Y A UNE LIGNE VIDE OU SPACE PASSE ET CONTINUE AVEC POUR RETOURNER à L'ETAPE 1
          CONTINUE
      TABLEAUCOMMANDE = SSP.GET_PARSER().PARSE(C)

      EXECUTER(TABLEAUCOMMANDE)
